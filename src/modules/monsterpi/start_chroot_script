#!/usr/bin/env bash
# start_chroot_script
# This installs FDM Monster and HAProxy
# Written by David Zwart
# GPL V3
########

# Source error handling, leave this in place
set -x
set -e

org=fdm-monster
repo=fdm-monster
repo_url="https://github.com/${org}/${repo}"

# Fetch latest release of FDM Monster
if [ -z ${MONSTERPI_FDMMONSTER_VERSION+x} ]
then
    # This will not download RC or unstable versions due to the x.y.z grep regex filter
    tag=$(git ls-remote --tags $repo_url | awk -F"/" '{print $NF}' | grep -E "^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$" | sort -V | tail -1)
    echo "Git tag loaded $tag"
else
    tag=${MONSTERPI_FDMMONSTER_VERSION}
    echo "Preset tag used $tag"
fi

source /common.sh
install_cleanup_trap

unpack /filesystem/home/pi /home/"${BASE_USER}" "${BASE_USER}"
unpack /filesystem/home/root /root root
unpack /filesystem/boot /boot

apt update

# Optimize apt packages by removing unused ones
remove_extra=$(remove_if_installed scratch squeak-plugins-scratch squeak-vm wolfram-engine python-minecraftpi minecraft-pi sonic-pi oracle-java8-jdk bluej libreoffice-common libreoffice-core freepats greenfoot nodered)
echo "removing:" "$remove_extra"
apt-get remove -y --purge  "$remove_extra"
apt-get autoremove -y
if [ "${BASE_DISTRO}" == "ubuntu" ]; then
    apt-get -y install jq git screen libffi-dev libssl-dev libatlas3-base libraspberrypi-bin rpi.gpio-common ca-certificates p7zip-full
else
    apt-get -y install jq git screen libffi-dev libssl-dev libatlas3-base ca-certificates p7zip-full
fi

# Install GPG
# apt install -y gnupg

# Install Node.js based on MONSTERPI_NODEJS_VERSION
curl -sL https://deb.nodesource.com/setup_$MONSTERPI_NODEJS_VERSION | bash -
apt update
apt install -y nodejs

# Install FDM Monster (this is really slow on QEMU!)
pushd /home/"${BASE_USER}"
    cd /home/"${BASE_USER}"/scripts/
    bash ./update-fdm-monster.sh --tag "${tag}" --non-interactive

    # Enable the systemd service at boot
    systemctl enable fdmmonster

    # Setup haproxy for http and https
    if [ "$MONSTERPI_INCLUDE_HAPROXY" == "yes" ]
    then
        apt -y install ssl-cert haproxy
        rm /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem
    fi
popd

# Add MongoDB as trusted source list
wget -qO - https://www.mongodb.org/static/pgp/server-"$MONSTERPI_MONGODB_VERSION".asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/`cat /etc/os-release | grep "^ID=" | cut -d "=" -f2` `cat /etc/os-release | grep "^VERSION_CODENAME=" | cut -d "=" -f2`/mongodb-org/$MONSTERPI_MONGODB_VERSION multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-$MONSTERPI_MONGODB_VERSION.list
apt update

# Install MongoDB
sudo apt install -y mongodb-org=4.4.15 mongodb-org-server=4.4.15 mongodb-org-shell=4.4.15 mongodb-org-mongos=4.4.15 mongodb-org-tools=4.4.15
systemctl enable mongod
systemctl start mongod

# add some "How To" info to boot output
# Note, this code is also in /filesystem/home/pi/scripts/
sed -i 's@exit 0@@' /etc/rc.local
cat <<'EOT' >> /etc/rc.local

echo
echo "------------------------------------------------------------"
echo
echo "You may now open a web browser on your local network and "
echo "navigate to any of the following addresses to access "
echo "FDM Monser:"
echo
for name in $_NAME;
do
    echo " http://$name.local"
done

for ip in $(hostname -I);
do
    echo "    http://$ip"
done

echo
echo "https is also available, with a self-signed certificate."
echo
echo "------------------------------------------------------------"
echo
EOT
echo 'exit 0' >> /etc/rc.local

# Add a longer welcome text to ~pi/.bashrc / ~${BASE_USER}/.bashrc
echo "source /home/${BASE_USER}/scripts/welcome" >> /home/"${BASE_USER}"/.bashrc

# Unpack root at the end, so files are modified before
unpack /filesystem/root /

# Enable certificate generation
if [ "$MONSTERPI_INCLUDE_HAPROXY" == "yes" ]
then
  systemctl_if_exists enable gencert.service
else
  # Remove the configs for system services we don't need
  rm /etc/systemd/system/gencert.service
fi

# Cleanup APT
apt-get clean
apt-get autoremove -y
